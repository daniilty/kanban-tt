version: "3"

services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      PGDATA: /data/postgres
      restart: unless-stopped
    volumes:
       - ./postgres:/data/postgres
    networks:
      - api
  auth-api:
    image: kanban-tt/auth-api:latest
    restart: unless-stopped
    networks:
      - api
    depends_on:
      - postgres
      - broker
    environment:
      USERS_GRPC_ADDR: users-api:8000
      HTTP_SERVER_ADDR: :3000
      TOKEN_EXPIRY: 86400
      PUBKEY: ${PUBKEY}
      PRIVKEY: ${PRIVKEY}
      KAFKA_BROKER: broker:9092
      KAFKA_TOPIC: emails
      KAFKA_GROUP_ID: auth-api
      PG_CONN: postgres://${PG_USER}:${PG_PASSWORD}@postgres:5432/postgres?sslmode=disable
      CONFIRM_EMAIL_URL: http://localhost:8080/api/v1/auth/confirm_email
  email:
    image: kanban-tt/email:latest
    restart: unless-stopped
    networks:
      - api
    depends_on:
      - broker
    environment:
      KAFKA_BROKER: broker:9092
      KAFKA_TOPIC: emails
      SMTP_HOST: mail.pesda.ru:587
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      KAFKA_GROUP_ID: email-sender
      TIMEOUT: 10
  users-api:
    image: kanban-tt/users-api:latest
    restart: unless-stopped
    networks:
      - api
    depends_on:
      - postgres
    environment:
      GRPC_SERVER_ADDR: :8000
      PG_CONN: postgres://${PG_USER}:${PG_PASSWORD}@postgres:5432/postgres?sslmode=disable
  tasks-api:
    image: kanban-tt/tasks-api:latest
    restart: unless-stopped
    networks:
      - api
    depends_on:
      - postgres
      - users-api
    environment:
      HTTP_ADDR: :3000
      PG_CONN: postgres://${PG_USER}:${PG_PASSWORD}@postgres:5432/postgres?sslmode=disable
      USERS_GRPC_ADDR: users-api:8000
  krakend_ce:
    image: devopsfaith/krakend:1.4.1
    volumes:
      - ./krakend:/etc/krakend
    restart: unless-stopped
    ports:
      - "8080:8080"
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    depends_on:
      - auth-api
      - users-api
      - tasks-api
    networks:
      - api
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - api
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    depends_on:
      - zookeeper
    networks:
      - api
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      TOPIC_AUTO_CREATE: 1

networks:
  api:
    driver: bridge
